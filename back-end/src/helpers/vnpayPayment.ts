import { Response } from 'express'
import { VNPay, ignoreLogger, ProductCode, VnpLocale, dateFormat, HashAlgorithm } from 'vnpay'
import { Request } from 'express'
import Cart from '~/models/cart.model'
import Order from '~/models/order.model'
import { ReturnQueryFromVNPay } from 'vnpay'

export const vnpaybuildPaymentUrl = new VNPay({
  // ‚ö° C·∫•u h√¨nh b·∫Øt bu·ªôc
  tmnCode: process.env.VNP_TMN_CODE,
  secureSecret: process.env.VNP_HASH_SECRET,
  vnpayHost: 'https://sanbox.vnpayment.vn',

  // üîß C·∫•u h√¨nh t√πy ch·ªçn
  testMode: true, // Ch·∫ø ƒë·ªô test
  hashAlgorithm: HashAlgorithm.SHA512, // Thu·∫≠t to√°n m√£ h√≥a
  loggerFn: ignoreLogger // Custom logger
})

export const vnpayCreateOrder = (totalBill: number, orderId: string,  res: Response) => {
  const expire = new Date()
  expire.setMinutes(expire.getMinutes() + 15) 
    // ‚úÖ Sinh m√£ giao d·ªãch m·ªõi m·ªói l·∫ßn thanh to√°n
  const txnRef = `${orderId}-${Date.now()}`
  const vnpayResponse = vnpaybuildPaymentUrl.buildPaymentUrl({
    vnp_Amount: totalBill,
    vnp_IpAddr: '127.0.0.0.1', // ip test local
    vnp_TxnRef: txnRef,
    vnp_OrderInfo: `Thanh to√°n ƒë∆°n h√†ng: ${txnRef}`,
    vnp_OrderType: ProductCode.Other,
    vnp_ReturnUrl: 'http://localhost:3100/checkout/vnpay-return',
    vnp_Locale: VnpLocale.VN,
    vnp_CreateDate: dateFormat(new Date()),
    vnp_ExpireDate: dateFormat(expire),
  })
  res.json({ 
    code: 201,  
    message: 'T·∫°o link thanh to√°n th√†nh c√¥ng!', 
    paymentUrl: vnpayResponse
  })
}

// [GET] /checkout/vnpay-return
export const vnpayReturn = async (req: Request, res: Response) => {
  try {
    delete req.query['vnp_SecureHashType']  
    delete req.query['vnp_SecureHash'] 

    // Verify query t·ª´ VNPay
    const verified = vnpaybuildPaymentUrl.verifyReturnUrl(req.query as unknown as ReturnQueryFromVNPay)
    if (verified.isVerified) {
      // L·∫•y TxnRef (c√≥ d·∫°ng: orderId-timestamp)
      const txnRef = req.query["vnp_TxnRef"] as string

      // T√°ch ph·∫ßn orderId g·ªëc tr∆∞·ªõc d·∫•u '-'
      const orderId = txnRef.split('-')[0]
      
      const order = await Order.findById(orderId)
      if (!order) {
        return res.json({ 
          code: 404,  
          message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
        })
      }
      if (req.query["vnp_ResponseCode"] === "00" && req.query["vnp_TransactionStatus"] === "00") {
        return res.redirect(`http://localhost:5173/checkout/success/${order.id}`)
      } 
      if (req.query["vnp_ResponseCode"] === "24" && req.query["vnp_TransactionStatus"] === "02") {
        return res.redirect('http://localhost:5173/cart')
      }
      return res.json({ 
        code: 200,  
        RspCode: '00',  
        Message: 'Th√†nh c√¥ng'
      })
    } else {
      return res.json({ 
        code: 400,  
        RspCode: '97',
        Message: 'Sai ch·ªØ k√Ω VNPay'
      })
    }
  } catch (error) {
    return res.json({ 
      code: 500,  
      message: "L·ªói x·ª≠ l√Ω callback VNPay",
      error: error
    })
  }
}

// [GET] /checkout/vnpay-ipn
export const vnpayIpn = async (req: Request, res: Response) => {
  try {
    delete req.query['vnp_SecureHashType']  
    delete req.query['vnp_SecureHash'] 
    const verified = vnpaybuildPaymentUrl.verifyIpnCall(req.query as unknown as ReturnQueryFromVNPay)
    if (verified.isVerified) {
      const { vnp_TxnRef, vnp_TransactionNo, vnp_BankCode, vnp_BankTranNo, vnp_CardType, vnp_PayDate } = req.query
      const rspCode  = req.query["vnp_ResponseCode"]
      // L·∫•y TxnRef (c√≥ d·∫°ng: orderId-timestamp)
      const txnRef = vnp_TxnRef as string

      // T√°ch ph·∫ßn orderId g·ªëc tr∆∞·ªõc d·∫•u '-'
      const orderId = txnRef.split('-')[0]
      const order = await Order.findById(orderId)

      if (!order) {
        return res.json({ 
          code: 404,
          RspCode: "01",  
          Message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!'
        })
      }
      // N·∫øu thanh to√°n th√†nh c√¥ng

      if (req.query["vnp_ResponseCode"] === "00" && req.query["vnp_TransactionStatus"] === "00") {
        console.log("ƒêi v√†o ipn")
        await Cart.updateOne(
          { _id: order.cart_id },
          { products: [] }
        )
        order.paymentInfo.status = 'PAID'
        // L∆∞u th√¥ng tin giao d·ªãch
        order.paymentInfo.details = {
          vnp_TxnRef: orderId,               // M√£ ƒë∆°n h√†ng c·ªßa b·∫°n (key li√™n k·∫øt ƒë·ªÉ bi·∫øt ƒë∆°n n√†o ƒë√£ thanh to√°n).
          vnp_TransactionNo: vnp_TransactionNo, // M√£ giao d·ªãch c·ªßa VNPay (d√πng ƒë·ªÉ tra c·ª©u v·ªõi VNPay khi c·∫ßn).
          vnp_BankCode: vnp_BankCode,           // Bi·∫øt kh√°ch h√†ng d√πng ng√¢n h√†ng n√†o (ti·ªán th·ªëng k√™, h·ªó tr·ª£).
          vnp_BankTranNo: vnp_BankTranNo,       // M√£ giao d·ªãch ng√¢n h√†ng
          vnp_CardType: vnp_CardType,
          vnp_PayDate: vnp_PayDate,             // Th·ªùi gian thanh to√°n (quan tr·ªçng cho b√°o c√°o & tracking).
          vnp_ResponseCode: rspCode,               // Tr·∫°ng th√°i giao d·ªãch ("00" = th√†nh c√¥ng).
        }
      } 
      if (req.query["vnp_ResponseCode"] === "24" && req.query["vnp_TransactionStatus"] === "02") {
        order.paymentInfo.status = 'FAILED'
      }
      await order.save()
      return res.json({ 
        code: 200,
        RspCode: '00',  
        Message: 'Th√†nh c√¥ng'
      })
    } else {
      return res.json({ 
        code: 200,
        RspCode: "97",  
        Message: 'Sai ch·ªØ k√Ω VNPay'
      })
    }
  } catch (error) {
    return res.json({ 
      code: 500,  
      message: "L·ªói x·ª≠ l√Ω ipn VNPay",
      error: error
    })
  }
}